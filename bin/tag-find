#!/usr/bin/env python3

import os
import sys

from tagtool import *



help_text = """
Usage:
\ttag-find [OPTION...] [SELECTOR...]

Selectors:
\t[TAG]    filters tagged files for this tag         ("AND")
\t+[TAG]   adds tagged files to the selection        ("OR")
\t-[TAG]   removes tagged files from the selection   ("NOT")

Options:
\t--nocase   performs a case insensitive search
\t--help    prints this help text and exits

For issues and documentation: https://github.com/brendan-w/tag-tool
"""



def main():
    operations = []
    symlink = False

    # config params that will override the .tagdir params
    overrides = {}

    for option in sys.argv[1:]:
        if option == "--help":
            print(help_text)
            return
        elif option == "--symlink":
            symlink = True
        elif option == "--nocase":
            overrides["case_sensitive"] = False
        else:
            if option[0] == "+":
                operations.append(Operation(option[1:], INCLUSION))
            elif option[0] == "-":
                operations.append(Operation(option[1:], EXCLUSION))
            else:
                operations.append(Operation(option, INTERSECTION))

    # check that the user entered something
    if len(operations) == 0:
        print("please give tag selectors")
        return

    # check for delimeters in the tags
    # if not all([ valid_tag(op.tag) for op in operations ]):
    #     print("tags cannot be empty strings, or contain delimeters")
    #     return

    # run the selection
    config = get_config(overrides=overrides)
    files = select(operations, config)

    if not symlink:
        for f in files:
            print(str(f))
    else:
        # empty the tmp directory
        os.makedirs(config["symlink_dir"], exist_ok=True)
        empty_links_dir(config["symlink_dir"])
        for f in files:
            # construct a pretty filename out of the original file's path
            name = os.path.relpath(str(f), config["root_dir"])
            name = name.replace("/", config["default_delim"])
            os.symlink(f, os.path.join(config["symlink_dir"], name))

        print("Symlinked %d files into %s" % (len(files), config["symlink_dir"]))


if(__name__ == "__main__"):
    main()
